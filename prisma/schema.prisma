// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  output        = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  hash    String
  Profile Profile?
}

model Profile {
  id        Int       @id @default(autoincrement())
  name      String
  about     String?
  website   String?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int       @unique
  posts     Post[]
  followers Follow[]  @relation("Follower")
  following Follow[]  @relation("Following")
  like      Like[]
  comments  Comment[]
}

model Post {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  Profile   Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId Int
  text      String
  likes     Like[]
  comments  Comment[]
}

model Comment {
  id            Int       @id @default(autoincrement())
  text          String
  Profile       Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId     Int
  Post          Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        Int?
  replies       Comment[] @relation("subComments")
  parentComment Comment?  @relation("subComments", fields: [commentId], references: [id], onDelete: Cascade)
  commentId     Int?
  likes         Like[]
}

model Follow {
  id          Int      @id @default(autoincrement())
  updatedAt   DateTime @updatedAt
  accepted    Boolean  @default(false)
  follower    Profile  @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  Int
  following   Profile  @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId Int

  @@unique([followerId, followingId])
}

model Like {
  id        Int      @id @default(autoincrement())
  Profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId Int
  Post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?
  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int?

  @@unique([profileId, postId])
  @@unique([profileId, commentId])
}
