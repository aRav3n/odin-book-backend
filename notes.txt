API 
  CRUD
    /user
      /
        POST
          Requires: { email, password, confirmPassword }
          Success returns: 200, { id, email, token }
          Fail returns: 400 or 500
      /:userId
        GET
          Requires: authHeader
          Success returns: 200, { email }
          Fail returns: 401 if not correct authHeader, 404 for bad id, 400 otherwise
        PUT
          Requires: authHeader, { currentEmail, currentPassword, newPassword, newPasswordConfirm }
          Success returns: 200
          Fail returns: 401 if not correct authHeader, 404 for bad id, 400 otherwise
        DELETE
          Requires: authHeader, { password }
          Success returns: 200
          Fail returns: 401 if not correct authHeader, 404 for bad id, 400 otherwise
      /login
        POST 
          Requires: { email, password }
          Success: 200, { id, email, token }
          Fail returns: 403 if wrong user info, 500 otherwise
    /profile
      /
        POST
          Requires: authHeader, { name, about (can be blank), website (can be blank) }
          Success returns: 200, { id }
          Fail returns: 401 if not correct authHeader, 400 otherwise
      /:profileId
        GET
          Requires: authHeader (just to verify logged in, doesn't have to match profileId)
          Success returns: 200, { name, about, website, posts, followers, following }
          Fail returns: 401 if bad authHeader, 404 for bad id, 400 otherwise
        PUT
          Requires: authHeader
          Success returns: 200, { name, about, website, posts, followers, following }
          Fail returns: 401 if not correct authHeader, 404 for bad id, 400 otherwise
        DELETE
          Requires: authHeader
          Success: 200
          Fail returns: 401 if not correct authHeader, 404 for bad id, 400 otherwise
    /post
      /
        POST
          Requires: authHeader, { profileId, text }
          Success returns: 200
          Fail returns: 401 if not correct authHeader, 400 otherwise
      /:postId
        GET
          Requires: authHeader
          Success returns: 200, { createdAt, profileId, text, profileName, profileId, likes, comments }
          Fail returns: 401 if not correct authHeader, 404 for bad id, 400 otherwise
        PUT
          Requires: authHeader
          Success returns: 200, { createdAt, profileId, text, profileName, profileId, likes, comments }
          Fail returns: 401 if not correct authHeader, 404 for bad id, 400 otherwise
        DELETE
          Requires: authHeader
          Success returns: 200
          Fail returns: 401 if not correct authHeader, 404 for bad id, 400 otherwise
    /comment
      /post/:postId
        GET
          Requires: authHeader (just to verify logged in, doesn't have to match profileId)
          Success returns: 200, { [ profile.name, likes ] }
          Fail returns: 401 if bad authHeader, 404 for bad id, 400 otherwise
        POST
          Requires: authHeader, { text }
          Success returns: 200, { profile.name, text, replies, likes }
          Fail returns: 401 if not correct authHeader, 404 for bad id, 400 otherwise
      /reply/:commentId
        GET
          Requires: authHeader (just to verify logged in, doesn't have to match profileId)
          Success returns: 200, { [ profile.name, likes ] }
          Fail returns: 401 if bad authHeader, 404 for bad id, 400 otherwise
        POST
          Requires: authHeader, { text }
          Success returns: 200, { profile.name, text, replies, likes }
          Fail returns: 401 if not correct authHeader, 404 for bad id, 400 otherwise
      /self/:commentId
        PUT
          Requires: authHeader, { newText }
          Success returns: 200, { profile.name, text, likes, replies }
          Fail returns: 401 if not correct authHeader, 404 for bad id, 400 otherwise
        DELETE
          Requires: authHeader
          Success returns: 200
          Fail returns: 401 if not correct authHeader, 404 for bad id, 400 otherwise
    /follow
      /
        POST
          Requires: authHeader { followingId }
          Success returns: 200
          Fail returns: 401 if not correct authHeader, 400 otherwise
      /profile/followers/:profileId
        GET
          Requires: authHeader
          Success returns: 200, { [ { follower.name, updatedAt, accepted } ] }
          Fail returns: 401 if not correct authHeader, 404 for bad id, 400 otherwise
      /profile/following/:profileId
        GET
          Requires: authHeader
          Success returns: 200, { [ if accepted: { following.name, updatedAt } ] }
          Fail returns: 401 if not correct authHeader, 404 for bad id, 400 otherwise
      /:followId
        PUT
          Requires: authHeader, { acceptBool }
          Success returns: 200
          Fail returns: 401 if not correct authHeader, 404 for bad id, 400 otherwise
        DELETE
          Requires: authHeader
          Success returns: 200
          Fail returns: 401 if not correct authHeader, 404 for bad id, 400 otherwise
  CD (reading is done at the post or comment level)
    /like
      /comment/:commentId
        POST
          Requires: authHeader
          Success returns: 200
          Fail returns: 401 if not correct authHeader, 404 for bad id, 400 otherwise
      /post/:postId
        POST
          Requires: authHeader
          Success returns: 200
          Fail returns: 401 if not correct authHeader, 404 for bad id, 400 otherwise
      /:likeId
        DELETE
          Requires: authHeader
          Success returns: 200
          Fail returns: 401 if not correct authHeader, 404 for bad id, 400 otherwise

Database
  User
    id
    email
    hash
    Profile (can have multiple)

  Profile
    id
    name
    about (optional)
    website (optional)
    User (can only have 1)
    Post (can have multiple)
    Following (can have multiple)
    Followers (can have multiple)
    Like (can have multiple)

  Post
    id
    createdAt
    Profile (can only have 1)
    text
    Like (can have multiple)
    Comment (can have multiple)

  Comment
    id
    text
    Profile (can only have 1)
    Post (optional, can only have 1)
    Comment (optional, can only have 1)
    Like (can have multiple)

  Follow
    id
    last_changed
    accepted (bool, default false)
    follower (Profile, can only have 1)
    following (Profile, can only have 1)

  Like
    id
    Profile (can only have 1)
    Post (optional, can only have 1)
    Comment (optional, can only have 1)